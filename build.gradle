buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.springframework.cloud:spring-cloud-contract-gradle-plugin:2.2.4.RELEASE'
    }
}


plugins {
    id 'org.springframework.boot' version '3.0.0'
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
    id 'org.asciidoctor.convert' version '1.5.12'
    id 'java'
    id 'jacoco'
}

apply plugin: 'spring-cloud-contract'

group = 'com.jpandres'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '15'

jacoco {
    toolVersion = "0.8.6"
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('snippetsDir', file("build/generated-snippets"))
    set('springCloudVersion', "Hoxton.SR8")
    mapstructVersion = '1.4.1.Final'

}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.cloud:spring-cloud-stream'
    implementation "org.mapstruct:mapstruct:${mapstructVersion}"

    implementation 'org.springdoc:springdoc-openapi-ui:1.4.8'
    //To use without the swagger-ui
//    implementation 'org.springdoc:springdoc-openapi-webmvc-core:1.4.8'

    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'org.springframework.cloud:spring-cloud-starter-contract-verifier'
    testImplementation 'org.springframework.cloud:spring-cloud-stream-test-support'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

    asciidoctor 'org.springframework.restdocs:spring-restdocs-asciidoctor'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

check.dependsOn jacocoTestCoverageVerification

jacocoTestReport {
    reports {
        xml.enabled true
        xml.destination file("${buildDir}/reports/jacoco/report.xml")
        csv.enabled false
        html.enabled false
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'
            excludes = [
                    'com.jpandres.docuuserservice.DocuUserServiceApplication'
            ]
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.8
            }
        }
    }
}

contracts {
    testFramework = org.springframework.cloud.contract.verifier.config.TestFramework.JUNIT5
    failOnNoContracts = false
}

test {
    outputs.dir snippetsDir
    useJUnitPlatform()
    finalizedBy jacocoTestReport // report is always generated after tests run
    finalizedBy asciidoctor
}

asciidoctor {
    onlyIf {
        test.state.didWork == true
    }
    attributes snippets: snippetsDir
    inputs.dir snippetsDir
    dependsOn test

    resources {
        from('src/docs/asciidoc') {
            include 'images/**'
        }
    }
}

bootJar {
    dependsOn asciidoctor
    println 'asciidoctor output: ' + asciidoctor.outputDir
    from("${asciidoctor.outputDir}/html5") {
        into 'static/docs'
    }
}

task stage(dependsOn: ['test', 'build'])

