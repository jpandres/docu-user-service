buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath 'org.springframework.cloud:spring-cloud-contract-gradle-plugin:2.2.4.RELEASE'
	}
}

plugins {
	id 'org.springframework.boot' version '2.3.4.RELEASE'
	id 'io.spring.dependency-management' version '1.0.10.RELEASE'
	id 'org.asciidoctor.convert' version '1.5.12'
	id 'java'
}

apply plugin: 'spring-cloud-contract'

group = 'com.jpandres'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '15'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('snippetsDir', file("build/generated-snippets"))
	set('springCloudVersion', "Hoxton.SR8")
	mapstructVersion = '1.3.1.Final'

}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.cloud:spring-cloud-stream'
	implementation "org.mapstruct:mapstruct:${mapstructVersion}"
	annotationProcessor "org.mapstruct:mapstruct-processor:${ mapstructVersion}"

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	testImplementation 'org.springframework.cloud:spring-cloud-starter-contract-verifier'
	testImplementation 'org.springframework.cloud:spring-cloud-stream-test-support'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

	asciidoctor 'org.springframework.restdocs:spring-restdocs-asciidoctor'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

contracts {
	targetFramework = org.springframework.cloud.contract.verifier.config.TestFramework.JUNIT5
	failOnNoContracts = false
}

test {
	outputs.dir snippetsDir
	useJUnitPlatform()
}

asciidoctor {
	attributes snippets: snippetsDir
	inputs.dir snippetsDir
	dependsOn test

	resources {
		from('src/docs/asciidoc') {
			include 'images/**'
		}
	}
}

bootJar {
	dependsOn asciidoctor
	from("${asciidoctor.outputDir}/html5") {
		into 'static/docs'
	}
}

task stage(dependsOn: ['test','build'])

